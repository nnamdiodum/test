import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SchemaParser {

    private static final Pattern SCHEMA_PATTERN = Pattern.compile(
            "schema (\\w+) = KeyValue\\[Class: \\{“(\\w+)”\\}\\]:\\s*(.*?)(?=\\n\\n|$)",
            Pattern.DOTALL);

    private static final Pattern FIELD_PATTERN = Pattern.compile(
            "\\n\\t(\\w+): (\\w+)",
            Pattern.DOTALL);

    public static Map<String, Map<String, String>> parseSchemas(String content) {
        Map<String, Map<String, String>> schemaMap = new HashMap<>();

        Matcher schemaMatcher = SCHEMA_PATTERN.matcher(content);
        while (schemaMatcher.find()) {
            String schemaName = schemaMatcher.group(1);
            String schemaBody = schemaMatcher.group(3);

            Map<String, String> fieldsMap = new HashMap<>();
            Matcher fieldMatcher = FIELD_PATTERN.matcher(schemaBody);
            while (fieldMatcher.find()) {
                fieldsMap.put(fieldMatcher.group(1), fieldMatcher.group(2));
            }

            schemaMap.put(schemaName, fieldsMap);
        }

        return schemaMap;
    }

    public static void main(String[] args) {
        Path filePath = Path.of("/path/to/your/text/file.txt"); // Update the file path

        try {
            String content = Files.readString(filePath);
            Map<String, Map<String, String>> schemaMap = parseSchemas(content);

            // Print the schemaMap to verify
            schemaMap.forEach((key, value) -> {
                System.out.println("Schema: " + key);
                value.forEach((fieldKey, fieldType) -> System.out.println("\t" + fieldKey + ": " + fieldType));
            });
        } catch (IOException e) {
            System.err.println("Error reading the file: " + e.getMessage());
        }
    }
}
